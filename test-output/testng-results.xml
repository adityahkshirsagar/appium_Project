<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="10" passed="9" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-05-02T22:13:48 IST" name="Default suite" finished-at="2024-05-02T22:17:46 IST" duration-ms="238455">
    <groups>
    </groups>
    <test started-at="2024-05-02T22:13:48 IST" name="Default test" finished-at="2024-05-02T22:17:46 IST" duration-ms="238455">
      <class name="Flexiloans.PositiveFlow">
        <test-method is-config="true" signature="setup()[pri:0, instance:Flexiloans.PositiveFlow@38cee291]" started-at="2024-05-02T22:13:49 IST" name="setup" finished-at="2024-05-02T22:14:07 IST" duration-ms="18637" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method is-config="true" signature="checkingToken(java.lang.reflect.Method)[pri:0, instance:Flexiloans.PositiveFlow@38cee291]" started-at="2024-05-02T22:14:07 IST" name="checkingToken" finished-at="2024-05-02T22:14:07 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Flexiloans.PositiveFlow.LandingPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkingToken -->
        <test-method signature="LandingPage()[pri:0, instance:Flexiloans.PositiveFlow@38cee291]" started-at="2024-05-02T22:14:07 IST" name="LandingPage" finished-at="2024-05-02T22:14:16 IST" duration-ms="8896" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LandingPage -->
        <test-method is-config="true" signature="checkingToken(java.lang.reflect.Method)[pri:0, instance:Flexiloans.PositiveFlow@38cee291]" started-at="2024-05-02T22:14:17 IST" name="checkingToken" finished-at="2024-05-02T22:14:17 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Flexiloans.PositiveFlow.Form2()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkingToken -->
        <test-method signature="Form2()[pri:1, instance:Flexiloans.PositiveFlow@38cee291]" started-at="2024-05-02T22:14:17 IST" name="Form2" finished-at="2024-05-02T22:14:39 IST" duration-ms="22275" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Form2 -->
        <test-method is-config="true" signature="checkingToken(java.lang.reflect.Method)[pri:0, instance:Flexiloans.PositiveFlow@38cee291]" started-at="2024-05-02T22:14:39 IST" name="checkingToken" finished-at="2024-05-02T22:14:39 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Flexiloans.PositiveFlow.Dashboard() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkingToken -->
        <test-method signature="Dashboard()[pri:2, instance:Flexiloans.PositiveFlow@38cee291]" started-at="2024-05-02T22:14:39 IST" name="Dashboard" finished-at="2024-05-02T22:14:59 IST" duration-ms="19640" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Dashboard -->
        <test-method is-config="true" signature="checkingToken(java.lang.reflect.Method)[pri:0, instance:Flexiloans.PositiveFlow@38cee291]" started-at="2024-05-02T22:14:59 IST" name="checkingToken" finished-at="2024-05-02T22:14:59 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Flexiloans.PositiveFlow.LoanAmountScreen()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkingToken -->
        <test-method signature="LoanAmountScreen()[pri:3, instance:Flexiloans.PositiveFlow@38cee291]" started-at="2024-05-02T22:14:59 IST" name="LoanAmountScreen" finished-at="2024-05-02T22:15:04 IST" duration-ms="5372" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoanAmountScreen -->
        <test-method signature="FormStep_1()[pri:4, instance:Flexiloans.PositiveFlow@38cee291]" started-at="2024-05-02T22:15:04 IST" name="FormStep_1" finished-at="2024-05-02T22:15:25 IST" duration-ms="20066" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- FormStep_1 -->
        <test-method is-config="true" signature="checkingToken(java.lang.reflect.Method)[pri:0, instance:Flexiloans.PositiveFlow@38cee291]" started-at="2024-05-02T22:15:04 IST" name="checkingToken" finished-at="2024-05-02T22:15:04 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Flexiloans.PositiveFlow.FormStep_1() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkingToken -->
        <test-method is-config="true" signature="checkingToken(java.lang.reflect.Method)[pri:0, instance:Flexiloans.PositiveFlow@38cee291]" started-at="2024-05-02T22:15:25 IST" name="checkingToken" finished-at="2024-05-02T22:15:25 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Flexiloans.PositiveFlow.FormStep_2()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkingToken -->
        <test-method signature="FormStep_2()[pri:5, instance:Flexiloans.PositiveFlow@38cee291]" started-at="2024-05-02T22:15:25 IST" name="FormStep_2" finished-at="2024-05-02T22:15:37 IST" duration-ms="12347" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- FormStep_2 -->
        <test-method is-config="true" signature="checkingToken(java.lang.reflect.Method)[pri:0, instance:Flexiloans.PositiveFlow@38cee291]" started-at="2024-05-02T22:15:37 IST" name="checkingToken" finished-at="2024-05-02T22:15:37 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Flexiloans.PositiveFlow.FormStep_3() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkingToken -->
        <test-method signature="FormStep_3()[pri:6, instance:Flexiloans.PositiveFlow@38cee291]" started-at="2024-05-02T22:15:37 IST" name="FormStep_3" finished-at="2024-05-02T22:16:01 IST" duration-ms="24112" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- FormStep_3 -->
        <test-method is-config="true" signature="checkingToken(java.lang.reflect.Method)[pri:0, instance:Flexiloans.PositiveFlow@38cee291]" started-at="2024-05-02T22:16:01 IST" name="checkingToken" finished-at="2024-05-02T22:16:01 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Flexiloans.PositiveFlow.OfferScreen() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkingToken -->
        <test-method signature="OfferScreen()[pri:7, instance:Flexiloans.PositiveFlow@38cee291]" started-at="2024-05-02T22:16:01 IST" name="OfferScreen" finished-at="2024-05-02T22:16:12 IST" duration-ms="10616" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- OfferScreen -->
        <test-method signature="BankStatementUpload()[pri:8, instance:Flexiloans.PositiveFlow@38cee291]" started-at="2024-05-02T22:16:12 IST" name="BankStatementUpload" finished-at="2024-05-02T22:16:59 IST" duration-ms="46624" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BankStatementUpload -->
        <test-method is-config="true" signature="checkingToken(java.lang.reflect.Method)[pri:0, instance:Flexiloans.PositiveFlow@38cee291]" started-at="2024-05-02T22:16:12 IST" name="checkingToken" finished-at="2024-05-02T22:16:12 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Flexiloans.PositiveFlow.BankStatementUpload() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkingToken -->
        <test-method is-config="true" signature="checkingToken(java.lang.reflect.Method)[pri:0, instance:Flexiloans.PositiveFlow@38cee291]" started-at="2024-05-02T22:16:59 IST" name="checkingToken" finished-at="2024-05-02T22:16:59 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Flexiloans.PositiveFlow.DocumentUpload()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkingToken -->
        <test-method signature="DocumentUpload()[pri:9, instance:Flexiloans.PositiveFlow@38cee291]" started-at="2024-05-02T22:16:59 IST" name="DocumentUpload" finished-at="2024-05-02T22:17:46 IST" duration-ms="47755" status="FAIL">
          <exception class="org.openqa.selenium.StaleElementReferenceException">
            <message>
              <![CDATA[The element 'By.xpath: //android.widget.Button[@resource-id="com.flexiloan:id/captureBtn"]' does not exist in DOM anymore
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '14.3.1', java.version: '17.0.4.1'
Driver info: io.appium.java_client.AppiumDriver
Command: [84b7cefd-35d8-47c7-bb0f-5cd541472e78, isElementDisplayed {id=00000000-0000-035d-ffff-ffff000007fe}]
Capabilities {appium:appActivity: com.flexiloan.Activity.Regi..., appium:appPackage: com.flexiloan, appium:automationName: UiAutomator2, appium:databaseEnabled: false, appium:desired: {appActivity: com.flexiloan.Activity.Regi..., appPackage: com.flexiloan, automationName: UiAutomator2, deviceName: Galaxy M21, ensureWebviewsHavePages: true, nativeWebScreenshot: true, platformName: ANDROID, platformVersion: 12, udid: RZ8NA0YN0FT}, appium:deviceApiLevel: 31, appium:deviceManufacturer: samsung, appium:deviceModel: SM-M215F, appium:deviceName: RZ8NA0YN0FT, appium:deviceScreenDensity: 450, appium:deviceScreenSize: 1080x2340, appium:deviceUDID: RZ8NA0YN0FT, appium:ensureWebviewsHavePages: true, appium:javascriptEnabled: true, appium:locationContextEnabled: false, appium:nativeWebScreenshot: true, appium:networkConnectionEnabled: true, appium:pixelRatio: 2.8125, appium:platformVersion: 12, appium:statBarHeight: 78, appium:takesScreenshot: true, appium:udid: RZ8NA0YN0FT, appium:viewportRect: {height: 2262, left: 0, top: 78, width: 1080}, appium:warnings: {}, appium:webStorageEnabled: false, platformName: ANDROID}
Element: [[AppiumDriver:  on ANDROID (84b7cefd-35d8-47c7-bb0f-5cd541472e78)] -> xpath: //android.widget.Button[@resource-id="com.flexiloan:id/captureBtn"]]
Session ID: 84b7cefd-35d8-47c7-bb0f-5cd541472e78]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.StaleElementReferenceException: The element 'By.xpath: //android.widget.Button[@resource-id="com.flexiloan:id/captureBtn"]' does not exist in DOM anymore
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '14.3.1', java.version: '17.0.4.1'
Driver info: io.appium.java_client.AppiumDriver
Command: [84b7cefd-35d8-47c7-bb0f-5cd541472e78, isElementDisplayed {id=00000000-0000-035d-ffff-ffff000007fe}]
Capabilities {appium:appActivity: com.flexiloan.Activity.Regi..., appium:appPackage: com.flexiloan, appium:automationName: UiAutomator2, appium:databaseEnabled: false, appium:desired: {appActivity: com.flexiloan.Activity.Regi..., appPackage: com.flexiloan, automationName: UiAutomator2, deviceName: Galaxy M21, ensureWebviewsHavePages: true, nativeWebScreenshot: true, platformName: ANDROID, platformVersion: 12, udid: RZ8NA0YN0FT}, appium:deviceApiLevel: 31, appium:deviceManufacturer: samsung, appium:deviceModel: SM-M215F, appium:deviceName: RZ8NA0YN0FT, appium:deviceScreenDensity: 450, appium:deviceScreenSize: 1080x2340, appium:deviceUDID: RZ8NA0YN0FT, appium:ensureWebviewsHavePages: true, appium:javascriptEnabled: true, appium:locationContextEnabled: false, appium:nativeWebScreenshot: true, appium:networkConnectionEnabled: true, appium:pixelRatio: 2.8125, appium:platformVersion: 12, appium:statBarHeight: 78, appium:takesScreenshot: true, appium:udid: RZ8NA0YN0FT, appium:viewportRect: {height: 2262, left: 0, top: 78, width: 1080}, appium:warnings: {}, appium:webStorageEnabled: false, platformName: ANDROID}
Element: [[AppiumDriver:  on ANDROID (84b7cefd-35d8-47c7-bb0f-5cd541472e78)] -> xpath: //android.widget.Button[@resource-id="com.flexiloan:id/captureBtn"]]
Session ID: 84b7cefd-35d8-47c7-bb0f-5cd541472e78
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:52)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:250)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:602)
at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:224)
at org.openqa.selenium.remote.RemoteWebElement.isDisplayed(RemoteWebElement.java:283)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at io.appium.java_client.pagefactory.ElementInterceptor.getObject(ElementInterceptor.java:42)
at io.appium.java_client.pagefactory.interceptors.InterceptorOfASingleElement.call(InterceptorOfASingleElement.java:65)
at io.appium.java_client.proxy.Interceptor.intercept(Interceptor.java:78)
at org.openqa.selenium.remote.RemoteWebElement$ByteBuddy$ZWjfeYUu.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions.access$000(ExpectedConditions.java:37)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.ExpectedConditions$23.apply(ExpectedConditions.java:656)
at org.openqa.selenium.support.ui.ExpectedConditions$23.apply(ExpectedConditions.java:652)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:205)
at Flexiloans.PositiveFlow.DocumentUpload(PositiveFlow.java:433)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.StaleElementReferenceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DocumentUpload -->
      </class> <!-- Flexiloans.PositiveFlow -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
